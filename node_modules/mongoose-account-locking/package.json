{
  "name": "mongoose-account-locking",
  "description": "Account Locking for mongoose user schema",
  "version": "0.0.1",
  "author": {
    "name": "Jeremy Martin"
  },
  "dependencies": {
    "mongoose": "*",
    "bcrypt": "*"
  },
  "keywords": [
    "mongoose",
    "mongo",
    "mongodb",
    "locking"
  ],
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": "*"
  },
  "main": "./index",
  "licenses": [
    {
      "type": "The MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readmeFilename": "README.md",
  "directories": {
    "example": "examples"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/fizerkhan/mongoose-account-locking.git"
  },
  "license": "MIT",
  "readme": "Mongoose Account Locking - Useful for Mongoose User Schema with locking\n========================\n\nThis mongoose plugin is based on the post by Jeremy Martin’s [DevSmash Blog](http://devsmash.com/blog/implementing-max-login-attempts-with-mongoose)\n\n### How it works?\n\n- A user’s account should be “locked” after some number of consecutive failed login attempts\n- A user’s account should become unlocked once a sufficient amount of time has passed\n- The User model should expose the reason for a failed login attempt to the application (though not necessarily to the end user)\n\n### Installation\n    npm install mongoose-account-locking\n\n### How to use?\n\nAfter define your Mongoose user schema, just add mongoose-account-locking as plugin to your user schema\n\n    UserSchema.plugin(locking);\n\nYou can also pass options when adding plugin\n\n    var options = {\n        , maxLoginAttempts = 5\n        , lockTime = 2 * 60 * 60 * 1000\n        , username = 'username'\n        , password = 'password';\n    };\n    User.plugin(locking, options)\n\nwhere\n\n- *maxLoginAttempts* : Maximum number of allowable failed logins\n\n- *lockTime*  :  Amount of duration that account will be locked after exceeding the maxLoginAttemts\n\n- *username* :  username key that is used in User schema. By default, it is 'username'. If you are using email as username, you can set to 'email'\n\n- *password* :  password key that is used in User schema. By default, it is 'password'.\n\n\nYou can authenticate user as follows\n\n    // Create Model based on User Schema\n    var User = mongoose.model('User', UserSchema);\n\n    // Authenticate username and password\n    // If success, callback receive user\n    // If failure, callback receive err or reason\n    // Reasons are NOT_FOUND, PASSWORD_INCORRECT, and MAX_ATTEMPTS. \n    User.getAuthenticated('username', 'MyPassword', function(err, user, reason) {\n        // Write your code here\n    }\n\n### Example\n\nRefer examples folder for sample code\n\nTo verify the code, you have to run the sample.js 5 times.\nAfter 5th time, it will lock the account. It wont allow you to access the account for next 2 hours.\n\n### Contributors\n\n- [Jeremy Martin](https://devsmash.com/)\n- [Fizer Khan](https://github.com/fizerkhan)\n\n### License\n\nMIT License\n",
  "_id": "mongoose-account-locking@0.0.1",
  "dist": {
    "shasum": "54147e0bbcfbf9af1fe7867e9a8b5a3d3cc53557",
    "tarball": "https://registry.npmjs.org/mongoose-account-locking/-/mongoose-account-locking-0.0.1.tgz"
  },
  "_from": "mongoose-account-locking@latest",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "fizerkhan",
    "email": "fizerkhan@gmail.com"
  },
  "maintainers": [
    {
      "name": "fizerkhan",
      "email": "fizerkhan@gmail.com"
    }
  ],
  "_shasum": "54147e0bbcfbf9af1fe7867e9a8b5a3d3cc53557",
  "_resolved": "https://registry.npmjs.org/mongoose-account-locking/-/mongoose-account-locking-0.0.1.tgz"
}
